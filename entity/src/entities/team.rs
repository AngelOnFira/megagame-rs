//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.5

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "team"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize)]
pub struct Model {
    pub id: i32,
    pub name: String,
    pub abreviation: String,
    pub guild: i32,
    pub created_at: String,
    pub updated_at: String,
    pub emoji: String,
    pub wallet: i32,
    pub role: i32,
    pub general_channel: i32,
    pub trade_channel: i32,
    pub menu_channel: i32,
    pub bank_embed_id: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    Name,
    Abreviation,
    Guild,
    CreatedAt,
    UpdatedAt,
    Emoji,
    Wallet,
    Role,
    GeneralChannel,
    TradeChannel,
    MenuChannel,
    BankEmbedId,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i32;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Player,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::Integer.def(),
            Self::Name => ColumnType::String(None).def(),
            Self::Abreviation => ColumnType::String(None).def(),
            Self::Guild => ColumnType::Integer.def(),
            Self::CreatedAt => ColumnType::String(None).def(),
            Self::UpdatedAt => ColumnType::String(None).def(),
            Self::Emoji => ColumnType::String(None).def(),
            Self::Wallet => ColumnType::Integer.def(),
            Self::Role => ColumnType::Integer.def(),
            Self::GeneralChannel => ColumnType::Integer.def(),
            Self::TradeChannel => ColumnType::Integer.def(),
            Self::MenuChannel => ColumnType::Integer.def(),
            Self::BankEmbedId => ColumnType::String(None).def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Player => Entity::has_many(super::player::Entity).into(),
        }
    }
}

impl Related<super::player::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Player.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
