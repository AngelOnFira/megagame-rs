//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.3

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "team")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: String,
    pub abreviation: Option<String>,
    pub created_at: Option<Date>,
    pub updated_at: Option<Date>,
    pub emoji: Option<String>,
    pub wallet: Option<i32>,
    pub fk_bank_embed_id: Option<i32>,
    pub fk_guild_id: i64,
    pub fk_team_role_id: Option<i64>,
    pub fk_team_category_id: Option<i64>,
    pub fk_general_channel_id: Option<i64>,
    pub fk_trade_channel_id: Option<i64>,
    pub fk_menu_channel_id: Option<i64>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::category::Entity",
        from = "Column::FkTeamCategoryId",
        to = "super::category::Column::DiscordId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Category,
    #[sea_orm(
        belongs_to = "super::channel::Entity",
        from = "Column::FkGeneralChannelId",
        to = "super::channel::Column::DiscordId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Channel3,
    #[sea_orm(
        belongs_to = "super::channel::Entity",
        from = "Column::FkMenuChannelId",
        to = "super::channel::Column::DiscordId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Channel2,
    #[sea_orm(
        belongs_to = "super::channel::Entity",
        from = "Column::FkTradeChannelId",
        to = "super::channel::Column::DiscordId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Channel1,
    #[sea_orm(
        belongs_to = "super::guild::Entity",
        from = "Column::FkGuildId",
        to = "super::guild::Column::DiscordId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Guild,
    #[sea_orm(has_many = "super::player::Entity")]
    Player,
    #[sea_orm(
        belongs_to = "super::role::Entity",
        from = "Column::FkTeamRoleId",
        to = "super::role::Column::DiscordId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Role,
}

impl Related<super::category::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Category.def()
    }
}

impl Related<super::guild::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Guild.def()
    }
}

impl Related<super::player::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Player.def()
    }
}

impl Related<super::role::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Role.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
